p1 <- dfs %>%
ggplot() +
geom_timeline(aes(x = Date,
y = COUNTRY,
size = Mag,
colour = Deaths)) +
theme_minimal()+
theme(legend.position="bottom")
p1
#-------------------------------------------------------------------------------
eqloc <- ggproto("eqloc", ggplot2::Geom,
required_aes = c("x"),
default_aes = ggplot2::aes(y = 0.5,
locations = NA,
label = NA,
number = NULL,
max_aes = NULL),
draw_panel = function(data, panel_scales, coord) {
# Transform the data
coords <- coord$transform(data, panel_scales)
# Locate text in plot
lines <- grid::segmentsGrob(x0 = grid::unit(coords$x, "npc"),
y0 = grid::unit(coords$y, "npc"),
x1 = grid::unit(coords$x, "npc"),
y1 = grid::unit(coords$y + 0.06/length(unique(coords$y)), "npc"),
default.units = "npc",
arrow = NULL,
name = NULL,
gp = grid::gpar(col=alpha('grey', 0.9)),
vp = NULL)
# Add text to line
text <- grid::textGrob(label = coords$locations,
x = unit(coords$x, "npc"),
y = unit(coords$y + 0.06/length(unique(coords$y)), "npc"),
rot = 60,
just = "left",
gp = grid::gpar(fontsize = 8))
# Plot over plot
grid::gTree(children = grid::gList(lines, text))
}
)
geom_eqloc <- function(mapping = NULL,
data = NULL,
na.rm = TRUE,
show.legend = NA,
stat = "identity",
position = "identity",
inherit.aes = TRUE, ...) {
ggplot2::layer(
geom = eqloc,
mapping = mapping,
data = data,
stat = stat,
position = position,
show.legend = show.legend,
inherit.aes = inherit.aes,
params = list(na.rm = na.rm, ...)
)
}
p1 + geom_eqloc(aes(x = Date, y = COUNTRY, locations = LOCATION_NAME, number = 3))
#-------------------------------------------------------------------------------
eq_map <- function(eq_clean=NULL, annot_col="datetime"){
stopifnot(any('datetime' %in% all_columns),any('LATITUDE' %in% all_columns),
any('LONGITUDE' %in% all_columns),any('EQ_MAG_ML' %in% all_columns))
#check to see if invalid column provided - print message and default to DATE
if(!(any(annot_col %in% all_columns))) {
warning("Invalid Column - DATE Displayed")
annot_col = "datetime"
}
#call to leaflet
leaflet::leaflet() %>%
leaflet::addTiles() %>%
leaflet::addCircleMarkers(data = eq_clean, lng = ~ LONGITUDE, lat = ~ LATITUDE, radius = ~ EQ_MAG_ML,
weight=1, fillOpacity = 0.2, popup =~ paste(get(annot_col)))
}
eq_create_label <- function(eq_clean=NULL) {
#test that correct columns are present
all_columns <- colnames(eq_clean)
stopifnot(any('LOCATION_NAME' %in% all_columns),any('EQ_MAG_ML' %in% all_columns),
any('DEATHS' %in% all_columns))
#Creating the "popup_text" without using NA Labels
data2<- eq_clean %>% dplyr::select_(.dots=c('LOCATION_NAME','EQ_MAG_ML','DEATHS')) %>%
dplyr::mutate(new_LOCATION_NAME = ~ ifelse(is.na(LOCATION_NAME), LOCATION_NAME, paste0("<b>Location:</b> ", LOCATION_NAME,"<br />"))) %>%
dplyr::mutate(new_EQ_PRIMARY = ~ ifelse(is.na(EQ_MAG_ML), EQ_MAG_ML, paste0("<b>Magnitude:</b> ", EQ_MAG_ML,"<br />"))) %>%
dplyr::mutate(new_DEATHS = ~ ifelse(is.na(DEATHS), DEATHS, paste0("<b>Total Deaths:</b> ", DEATHS))) %>%
tidyr::unite('popup_values',c('new_LOCATION_NAME','new_EQ_PRIMARY','new_DEATHS'),sep ='') %>%
dplyr::mutate(popup_values = ~ stringr::str_replace_all(popup_values,"[,]*NA[,]*","")) %>%
dplyr::mutate(popup_values = ~ ifelse(popup_values=="","All Values are NA",popup_values))
popup_values <- dplyr::collect(dplyr::select(data2,.dots=c('popup_values')))[[1]]
return(popup_values)
}
eq_map(annot_col = "popup_text")
df %>% eq_map(annot_col = "popup_text")
#-------------------------------------------------------------------------------
eq_map <- function(eq_clean=NULL, annot_col="datetime"){
#call to leaflet
leaflet::leaflet() %>%
leaflet::addTiles() %>%
leaflet::addCircleMarkers(data = eq_clean, lng = ~ LONGITUDE, lat = ~ LATITUDE, radius = ~ EQ_MAG_ML,
weight=1, fillOpacity = 0.2, popup =~ paste(get(annot_col)))
}
eq_create_label <- function(eq_clean=NULL) {
#test that correct columns are present
all_columns <- colnames(eq_clean)
stopifnot(any('LOCATION_NAME' %in% all_columns),any('EQ_MAG_ML' %in% all_columns),
any('DEATHS' %in% all_columns))
#Creating the "popup_text" without using NA Labels
data2<- eq_clean %>% dplyr::select_(.dots=c('LOCATION_NAME','EQ_MAG_ML','DEATHS')) %>%
dplyr::mutate(new_LOCATION_NAME = ~ ifelse(is.na(LOCATION_NAME), LOCATION_NAME, paste0("<b>Location:</b> ", LOCATION_NAME,"<br />"))) %>%
dplyr::mutate(new_EQ_PRIMARY = ~ ifelse(is.na(EQ_MAG_ML), EQ_MAG_ML, paste0("<b>Magnitude:</b> ", EQ_MAG_ML,"<br />"))) %>%
dplyr::mutate(new_DEATHS = ~ ifelse(is.na(DEATHS), DEATHS, paste0("<b>Total Deaths:</b> ", DEATHS))) %>%
tidyr::unite('popup_values',c('new_LOCATION_NAME','new_EQ_PRIMARY','new_DEATHS'),sep ='') %>%
dplyr::mutate(popup_values = ~ stringr::str_replace_all(popup_values,"[,]*NA[,]*","")) %>%
dplyr::mutate(popup_values = ~ ifelse(popup_values=="","All Values are NA",popup_values))
popup_values <- dplyr::collect(dplyr::select(data2,.dots=c('popup_values')))[[1]]
return(popup_values)
}
df %>% eq_map(annot_col = "popup_text")
df
#-------------------------------------------------------------------------------
eq_map <- function(eq_clean=NULL, annot_col="datetime"){
#call to leaflet
leaflet::leaflet() %>%
leaflet::addTiles() %>%
leaflet::addCircleMarkers(data = eq_clean,
lng = ~ Lontitude,
lat = ~ Latitude,
radius = ~ Mag,
weight=1,
fillOpacity = 0.2,
popup =~ paste(get(annot_col)))
}
eq_create_label <- function(eq_clean=NULL) {
#Creating the "popup_text" without using NA Labels
data2<- eq_clean %>% dplyr::select_(.dots=c('LOCATION_NAME','Mag','Deaths')) %>%
dplyr::mutate(new_LOCATION_NAME = ~ ifelse(is.na(LOCATION_NAME), LOCATION_NAME, paste0("<b>Location:</b> ", LOCATION_NAME,"<br />"))) %>%
dplyr::mutate(new_EQ_PRIMARY = ~ ifelse(is.na(EQ_MAG_ML), EQ_MAG_ML, paste0("<b>Magnitude:</b> ", EQ_MAG_ML,"<br />"))) %>%
dplyr::mutate(new_DEATHS = ~ ifelse(is.na(DEATHS), DEATHS, paste0("<b>Total Deaths:</b> ", DEATHS))) %>%
tidyr::unite('popup_values',c('new_LOCATION_NAME','new_EQ_PRIMARY','new_DEATHS'),sep ='') %>%
dplyr::mutate(popup_values = ~ stringr::str_replace_all(popup_values,"[,]*NA[,]*","")) %>%
dplyr::mutate(popup_values = ~ ifelse(popup_values=="","All Values are NA",popup_values))
popup_values <- dplyr::collect(dplyr::select(data2,.dots=c('popup_values')))[[1]]
return(popup_values)
}
df %>% eq_map(annot_col = "popup_text")
#-------------------------------------------------------------------------------
eq_map <- function(eq_clean=NULL, annot_col="datetime"){
#call to leaflet
leaflet::leaflet() %>%
leaflet::addTiles() %>%
leaflet::addCircleMarkers(data = eq_clean,
lng = ~ Lontitude,
lat = ~ Latitude,
radius = ~ Mag,
weight=1,
fillOpacity = 0.2,
popup =~ paste(get(annot_col)))
}
dfs %>% eq_map(annot_col = "Date")
#-------------------------------------------------------------------------------
eq_map <- function(eq_clean=NULL, annot_col="Date"){
#call to leaflet
leaflet::leaflet() %>%
leaflet::addTiles() %>%
leaflet::addCircleMarkers(data = eq_clean,
lng = Longitude,
lat = Latitude,
radius = ~ Mag,
weight=1,
fillOpacity = 0.2,
popup =~ paste(get(annot_col)))
}
dfs %>% eq_map(annot_col = "Date")
eq_map <- function(df_map = rlang::.data, annot_col) {
# Using Leaflet to plot a map.
leaflet::leaflet(df_map) %>%
leaflet::addTiles() %>%
# Adding circles in each Earthquake point.
leaflet::addCircles(lng = ~LONGITUDE,
lat = ~LATITUDE,
weight = 1,
radius = ~EQ_PRIMARY * 20000,
# Plotting a simple information inside of the popup.
popup = ~eval(parse(text = annot_col)) ) -> map_to_plot
# Returning the map with circles.
return(map_to_plot)
}
dfs %>% eq_map(annot_col = "Date")
eq_map <- function(df_map = rlang::.data, annot_col) {
# Using Leaflet to plot a map.
leaflet::leaflet(df_map) %>%
leaflet::addTiles() %>%
# Adding circles in each Earthquake point.
leaflet::addCircles(lng = ~Longitude,
lat = ~Latitude,
weight = 1,
radius = ~Mag * 20000,
# Plotting a simple information inside of the popup.
popup = ~eval(parse(text = annot_col)) ) -> map_to_plot
# Returning the map with circles.
return(map_to_plot)
}
dfs %>% eq_map(annot_col = "Date")
#-------------------------------------------------------------------------------
eq_map <- function(df_map = NULL, annot_col) {
# Using Leaflet to plot a map.
leaflet::leaflet(df_map) %>%
leaflet::addTiles() %>%
# Adding circles in each Earthquake point.
leaflet::addCircles(lng = ~Longitude,
lat = ~Latitude,
weight = 1,
radius = ~Mag * 20000,
# Plotting a simple information inside of the popup.
popup = ~eval(parse(text = annot_col)) ) -> map_to_plot
# Returning the map with circles.
return(map_to_plot)
}
dfs %>% eq_map(annot_col = "Date")
#-------------------------------------------------------------------------------
eq_map <- function(df_map = NULL, annot_col) {
# Using Leaflet to plot a map.
leaflet::leaflet(df_map) %>%
leaflet::addTiles() %>%
# Adding circles in each Earthquake point.
leaflet::addCircles(lng = ~Longitude,
lat = ~Latitude,
weight = 1,
radius = ~Mag * 25000,
# Plotting a simple information inside of the popup.
popup = ~eval(parse(text = annot_col)) ) -> map_to_plot
# Returning the map with circles.
return(map_to_plot)
}
dfs %>% eq_map(annot_col = "Date")
#-------------------------------------------------------------------------------
eq_map <- function(df_map = NULL, annot_col) {
# Using Leaflet to plot a map.
leaflet::leaflet(df_map) %>%
leaflet::addTiles() %>%
# Adding circles in each Earthquake point.
leaflet::addCircles(lng = ~Longitude,
lat = ~Latitude,
weight = 1,
radius = ~Mag * 25000,
# Plotting a simple information inside of the popup.
popup = ~eval(parse(text = annot_col)) ) -> map_to_plot
# Returning the map with circles.
return(map_to_plot)
}
dfs %>% eq_map(annot_col = "Date")
p2 <- p1 + geom_eqloc(aes(x = Date, y = COUNTRY, locations = LOCATION_NAME, number = 3))
p2
p3 <- dfs %>% eq_map(annot_col = "Date")
p3
p3 <- dfs %>% eq_map(annot_col = "Date")
p3
dfs %>%
mutate(popup_text = eq_create_label(.)) %>%
eq_map(annot_col = "popup_text")
eq_create_label <- function(eq_clean=NULL) {
#Creating the "popup_text" without using NA Labels
data2<- eq_clean %>% dplyr::select_(.dots=c('LOCATION_NAME','Mag','Deaths')) %>%
dplyr::mutate(new_LOCATION_NAME = ~ ifelse(is.na(LOCATION_NAME), LOCATION_NAME, paste0("<b>Location:</b> ", LOCATION_NAME,"<br />"))) %>%
dplyr::mutate(new_EQ_PRIMARY = ~ ifelse(is.na(Mag), Mag, paste0("<b>Magnitude:</b> ", Mag,"<br />"))) %>%
dplyr::mutate(new_DEATHS = ~ ifelse(is.na(Deaths), Deaths, paste0("<b>Total Deaths:</b> ", Deaths))) %>%
tidyr::unite('popup_values',c('new_LOCATION_NAME','new_EQ_PRIMARY','new_DEATHS'),sep ='') %>%
dplyr::mutate(popup_values = ~ stringr::str_replace_all(popup_values,"[,]*NA[,]*","")) %>%
dplyr::mutate(popup_values = ~ ifelse(popup_values=="","All Values are NA",popup_values))
popup_values <- dplyr::collect(dplyr::select(data2,.dots=c('popup_values')))[[1]]
return(popup_values)
}
dfs %>%
mutate(popup_text = eq_create_label(.)) %>%
eq_map(annot_col = "popup_text")
eq_create_label <- function(eq_clean=NULL) {
#Creating the "popup_text" without using NA Labels
data2<- eq_clean %>% dplyr::select_(.dots=c('LOCATION_NAME','Mag','Deaths')) %>%
dplyr::mutate(new_LOCATION_NAME = ~ ifelse(is.na(LOCATION_NAME), LOCATION_NAME, paste0("<b>Location:</b> ", LOCATION_NAME,"<br />"))) %>%
dplyr::mutate(new_EQ_PRIMARY = ~ ifelse(is.na(Mag), Mag, paste0("<b>Magnitude:</b> ", Mag,"<br />"))) %>%
dplyr::mutate(new_DEATHS = ~ ifelse(is.na(Deaths), Deaths, paste0("<b>Total Deaths:</b> ", Deaths))) %>%
tidyr::unite('popup_values',c('new_LOCATION_NAME','new_EQ_PRIMARY','new_DEATHS'),sep ='') %>%
dplyr::mutate(popup_values = ~ stringr::str_replace_all(popup_values,"[,]*NA[,]*","")) %>%
dplyr::mutate(popup_values = ~ ifelse(popup_values=="","All Values are NA",popup_values))
popup_values <- dplyr::collect(dplyr::select(data2,.dots=c('popup_values')))[[1]]
return(popup_values)
}
dfs %>%
mutate(popup_text = eq_create_label(.)) %>%
eq_map(annot_col = "popup_text")
dfs
eq_create_label <- function(eq_clean=NULL) {
#Creating the "popup_text" without using NA Labels
data2<- eq_clean %>% dplyr::select_(.dots=c('LOCATION_NAME','Mag','Deaths')) %>%
dplyr::mutate(new_LOCATION_NAME = ~ ifelse(is.na(LOCATION_NAME), LOCATION_NAME, paste0("<b>Location:</b> ", LOCATION_NAME,"<br />"))) %>%
dplyr::mutate(new_EQ_PRIMARY = ~ ifelse(is.na(Mag), Mag, paste0("<b>Magnitude:</b> ", Mag,"<br />"))) %>%
dplyr::mutate(new_DEATHS = ~ ifelse(is.na(Deaths), Deaths, paste0("<b>Total Deaths:</b> ", Deaths))) %>%
tidyr::unite('popup',c('new_LOCATION_NAME','new_EQ_PRIMARY','new_DEATHS'),sep ='') %>%
dplyr::mutate(popup = ~ stringr::str_replace_all(popup_values,"[,]*NA[,]*","")) %>%
dplyr::mutate(popup = ~ ifelse(popup_values=="","All Values are NA",popup_values))
popup <- dplyr::collect(dplyr::select(data2,.dots=c('popup')))[[1]]
return(popup)
}
dfs %>%
mutate(popup_text = eq_create_label(.)) %>%
eq_map(annot_col = "popup")
dfs %>%
mutate(t1 <- paste0("<b>Location:</b> ", LOCATION_NAME,"<br />"),
t2 <- paste0("<b>Magnitude:</b> ", Mag,"<br />"),
t3 <- paste0("<b>Deaths:</b> ", Deaths,"<br />")) %>%
unite('popup',c('t1','t2','t3'))
dfs %>%
mutate(t1 = paste0("<b>Location:</b> ", LOCATION_NAME,"<br />"),
t2 = paste0("<b>Magnitude:</b> ", Mag,"<br />"),
t3 = paste0("<b>Deaths:</b> ", Deaths,"<br />")) %>%
unite('popup',c('t1','t2','t3'))
dfs %>%
mutate(t1 = paste0("<b>Location:</b> ", LOCATION_NAME,"<br />"),
t2 = paste0("<b>Magnitude:</b> ", Mag,"<br />"),
t3 = paste0("<b>Deaths:</b> ", Deaths,"<br />")) %>%
unite('popup',c('t1','t2','t3'), sep='') %>%
eq_map(annot_col = "popup")
eq_create_label <- function(eq_clean=NULL) {
#Creating the "popup_text" without using NA Labels
data2<- eq_clean %>% dplyr::select_(.dots=c('LOCATION_NAME','Mag','Deaths')) %>%
mutate(t1 = paste0("<b>Location:</b> ", LOCATION_NAME,"<br />"),
t2 = paste0("<b>Magnitude:</b> ", Mag,"<br />"),
t3 = paste0("<b>Deaths:</b> ", Deaths,"<br />")) %>%
unite('popup',c('t1','t2','t3'), sep='')
popup <- dplyr::collect(dplyr::select(data2,.dots=c('popup')))[[1]]
return(popup)
}
dfs %>%
mutate(popup_text = eq_create_label(.)) %>%
eq_map(annot_col = "popup")
eq_create_label <- function(eq_clean=NULL) {
#Creating the "popup_text" without using NA Labels
data2<- eq_clean %>% dplyr::select_(.dots=c('LOCATION_NAME','Mag','Deaths')) %>%
mutate(t1 = paste0("<b>Location:</b> ", LOCATION_NAME,"<br />"),
t2 = paste0("<b>Magnitude:</b> ", Mag,"<br />"),
t3 = paste0("<b>Deaths:</b> ", Deaths,"<br />")) %>%
unite('popup',c('t1','t2','t3'), sep='')
popup <- dplyr::collect(dplyr::select(data2,.dots=c('popup')))[[1]]
return(popup)
}
dfs %>%
mutate(popup_text = eq_create_label(.)) %>%
eq_map(annot_col = "popup")
dfs %>%
mutate(popup = eq_create_label(.)) %>%
eq_map(annot_col = "popup")
eq_create_label <- function(eq_clean=NULL) {
#Creating the "popup_text" without using NA Labels
data2<- eq_clean %>% dplyr::select_(.dots=c('LOCATION_NAME','Mag','Deaths')) %>%
mutate(t1 = paste0("<b>Location:</b> ", LOCATION_NAME,"<br />"),
t2 = paste0("<b>Magnitude:</b> ", Mag,"<br />"),
t3 = paste0("<b>Deaths:</b> ", Deaths,"<br />")) %>%
unite('popup',c('t1','t2','t3'), sep='') %>%
mutate(popup = ~ str_replace_all(popup_values,"[,]*NA[,]*","")) %>%
popup <- dplyr::collect(dplyr::select(data2,.dots=c('popup')))[[1]]
return(popup)
}
dfs %>%
mutate(popup = eq_create_label(.)) %>%
eq_map(annot_col = "popup")
eq_create_label <- function(eq_clean=NULL) {
#Creating the "popup_text" without using NA Labels
data2<- eq_clean %>% dplyr::select_(.dots=c('LOCATION_NAME','Mag','Deaths')) %>%
mutate(t1 = paste0("<b>Location:</b> ", LOCATION_NAME,"<br />"),
t2 = paste0("<b>Magnitude:</b> ", Mag,"<br />"),
t3 = paste0("<b>Deaths:</b> ", Deaths,"<br />")) %>%
unite('popup',c('t1','t2','t3'), sep='') %>%
mutate(popup = ~ str_replace_all(popup_values,"[,]*NA[,]*",""))
popup <- dplyr::collect(dplyr::select(data2,.dots=c('popup')))[[1]]
return(popup)
}
dfs %>%
mutate(popup = eq_create_label(.)) %>%
eq_map(annot_col = "popup")
eq_create_label <- function(df) {
#Creating the "popup_text" without using NA Labels
df<- df %>% select_(.dots=c('LOCATION_NAME','Mag','Deaths')) %>%
mutate(t1 = paste0("<b>Location:</b> ", LOCATION_NAME,"<br />"),
t2 = paste0("<b>Magnitude:</b> ", Mag,"<br />"),
t3 = paste0("<b>Deaths:</b> ", Deaths,"<br />")) %>%
unite('popup',c('t1','t2','t3'), sep='') %>%
mutate(popup = ~ str_replace_all(popup_values,"[,]*NA[,]*",""))
popup <- dplyr::collect(dplyr::select(d,.dots=c('popup')))[[1]]
return(popup)
}
dfs %>%
mutate(popup = eq_create_label(.)) %>%
eq_map(annot_col = "popup")
eq_create_label <- function(df) {
#Creating the "popup_text" without using NA Labels
df<- df %>% select_(.dots=c('LOCATION_NAME','Mag','Deaths')) %>%
mutate(t1 = paste0("<b>Location:</b> ", LOCATION_NAME,"<br />"),
t2 = paste0("<b>Magnitude:</b> ", Mag,"<br />"),
t3 = paste0("<b>Deaths:</b> ", Deaths,"<br />")) %>%
unite('popup',c('t1','t2','t3'), sep='')
popup <- dplyr::collect(dplyr::select(d,.dots=c('popup')))[[1]]
return(popup)
}
dfs %>%
mutate(popup = eq_create_label(.)) %>%
eq_map(annot_col = "popup")
eq_create_label <- function(df) {
#Creating the "popup_text" without using NA Labels
df<- df %>% select_(.dots=c('LOCATION_NAME','Mag','Deaths')) %>%
mutate(t1 = paste0("<b>Location:</b> ", LOCATION_NAME,"<br />"),
t2 = paste0("<b>Magnitude:</b> ", Mag,"<br />"),
t3 = paste0("<b>Deaths:</b> ", Deaths,"<br />")) %>%
unite('popup',c('t1','t2','t3'), sep='')
popup <- dplyr::collect(dplyr::select(d,.dots=c('popup')))[[1]]
return(popup)
}
dfs %>%
mutate(popup = eq_create_label(.)) %>%
eq_map(annot_col = "popup")
eq_create_label <- function(df) {
#Creating the "popup_text" without using NA Labels
df<- df %>% select_(.dots=c('LOCATION_NAME','Mag','Deaths')) %>%
mutate(t1 = paste0("<b>Location:</b> ", LOCATION_NAME,"<br />"),
t2 = paste0("<b>Magnitude:</b> ", Mag,"<br />"),
t3 = paste0("<b>Deaths:</b> ", Deaths,"<br />")) %>%
unite('popup',c('t1','t2','t3'), sep='')
popup <- dplyr::collect(dplyr::select(df,.dots=c('popup')))[[1]]
return(popup)
}
dfs %>%
mutate(popup = eq_create_label(.)) %>%
eq_map(annot_col = "popup")
load_all()
library(MasteringSofwareDevelopmentInRCapstone)
library(testthat)
test_check("usethis")
library(usethis)
test_check("usethis")
library(MasteringSofwareDevelopmentInRCapstone)
test()
use_travis()
test_check("usethis")
library("qpdf")
check()
devtools::check()
load()
check()
library(devtools)
check()
library(MasteringSofwareDevelopmentInRCapstone)
library(MasteringSofwareDevelopmentInRCapstone)
check()
document()
library(MasteringSofwareDevelopmentInRCapstone)
load()
devtools::uses_testthat()
devtools::clean_vignettes()
check()
check()
library(leaflet)
libarry(terre)
libarry(terra)
library(terra)
library(raster)
library(MasteringSofwareDevelopmentInRCapstone)
check()
check()
document()
document()
document()
library(MasteringSofwareDevelopmentInRCapstone)
library(dplyr)
library(lubridate)
library(stringr)
library(ggplot2)
library(tidyr)
df <- eq_clean_data(NOAArawData='../data-raw/earthquakes-2021-10-06_09-24-38_+0200.tsv')
head(df)
Apply correction to the location and create the attributes: COUNTRY and LOCATION_NAME. Also store the data as a default dataset in the library
```{r}
dfclean <- eq_location_clean(df)
dfclean <- eq_location_clean(df)
head(df)
dfclean <- eq_location_clean(df)
dfclean
dfs <- dfclean %>%
filter(Year>2015 & Year<2021 & (COUNTRY =='CHINA' | COUNTRY =='GREECE'))
test_check("MasteringSofwareDevelopmentInRCapstone")
library(testthat)
library(MasteringSofwareDevelopmentInRCapstone)
test_check("MasteringSofwareDevelopmentInRCapstone")
test_that()
document()
load()
dfclean
dfclena
dfclean
load_all
load_all()
document()
use_data()
use_travis()
usethis
use_cran_comments
use_cran_comments()
check()
document
document()
load_all()
check()
load_all()
document()
